#!/usr/bin/env python -tt
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: rax_domain
short_description: create / delete dns domain on Rackspace DNS
description:
     - creates / deletes a Rackspace Public Cloud domain
version_added: "1.4"
options:
  state:
    description:
     - Indicate desired state of the resource
    choices: ['present', 'absent']
    default: present
  credentials:
    description:
     - File to find the Rackspace credentials in (ignored if C(api_key) and
       C(username) are provided)
    default: null
    aliases: ['creds_file']
  api_key:
    description:
     - Rackspace API key (overrides C(credentials))
  username:
    description:
     - Rackspace username (overrides C(credentials))
  domain:
    description:
     - Dns domain name (or subdomain) to create
  email:
    description:
     - Email address of domain admin
  ttl:
   description:
     - ttl for domain.  Minimum 300
   default: 3600
  comment:
    description:
     - Comment for the domain
    default: null
requirements: [ "pyrax" ]
author: Ron Pedde, Christopher H. Laco, Jesse Keating
notes:
  - The following environment variables can be used, C(RAX_USERNAME),
    C(RAX_API_KEY), C(RAX_CREDS), C(RAX_CREDENTIALS), C(RAX_REGION).
  - C(RAX_CREDENTIALS) and C(RAX_CREDS) points to a credentials file
    appropriate for pyrax
  - C(RAX_USERNAME) and C(RAX_API_KEY) obviate the use of a credentials file
  - C(RAX_REGION) defines a Rackspace Public Cloud region (DFW, ORD, LON, ...)
'''

EXAMPLES = '''
- name: Register a DNS domain
  gather_facts: False

  tasks:
    - name: Register DNS
      local_action:
        module: rax_domain
        credentials: ~/.raxpub
        domain: "mydomain.com"
        email: "zoneadmin@mydomain.com"
        ttl: 3600
        comment: "My awesome domain"
        state: present
'''

import sys
import os

try:
    import pyrax
    import pyrax.utils
    from pyrax import exc
except ImportError:
    print("failed=True msg='pyrax required for this module'")
    sys.exit(1)


def cloud_domain(module, state, domain, email, ttl, comment):
    for arg in (state, domain, email):
        if not arg:
            module.fail_json(msg='%s is required for cloud_dns' % arg)

    changed=False
    domains = []

    try:
        domainlist = dict([(d.name, d)
                           for d in
                           list(pyrax.cloud_dns.get_domain_iterator())])
    except Exception, e:
        module.fail_json(msg='Error listing domains: %s' % e.message)

    if state == 'present':
        if not domain in domainlist:
            try:
                newdom = pyrax.cloud_dns.create(name=domain,
                                                emailAddress=email,
                                                ttl=ttl,
                                                comment=comment)
                domainlist[newdom.name] = newdom
                changed = True
            except Exception, e:
                module.fail_json(msg='Error creating domain: %s' % e.message)
        else:
            # Make sure all the parameters match
            dom = domainlist[domain]
            if (dom.emailAddress != email) or (dom.ttl != ttl) or (dom.comment != comment):
                try:
                    dom.update(emailAddress=email,
                               ttl=ttl,
                               comment=comment)
                    changed = True
                except Exception, e:
                    module.fail_json(msg='Error updating domain: %s' % e.message)
    elif state == 'absent':
        if domain in domainlist:
            try:
                domainlist[domain].delete()
                changed = True
                del(domainlist[domain])
            except Exception, e:
                module.fail_json(msg='Error deleting domain: %s' % e.message)

    domains = domainlist.keys()
    module.exit_json(changed=changed, domains=domains)

def main():
    module = AnsibleModule(
        argument_spec=dict(
            state=dict(default='present',
                       choices=['present', 'absent']),
            credentials=dict(aliases=['creds_file']),
            api_key=dict(),
            username=dict(),
            region=dict(),
            domain=dict(),
            email=dict(),
            ttl=dict(default=3600),
            comment=dict(default='Created by ansible run')
        )
    )

    credentials = module.params.get('credentials')
    api_key = module.params.get('api_key')
    username = module.params.get('username')
    region = module.params.get('region')
    state = module.params.get('state')
    domain = module.params.get('domain')
    email = module.params.get('email')
    ttl = module.params.get('ttl')
    comment = module.params.get('comment')

    try:
        username = username or os.environ.get('RAX_USERNAME')
        api_key = api_key or os.environ.get('RAX_API_KEY')
        credentials = (credentials or
                       os.environ.get('RAX_CREDENTIALS') or
                       os.environ.get('RAX_CREDS_FILE'))
        region = region or os.environ.get('RAX_REGION')

    except KeyError, e:
        module.fail_json(msg='Unable to load %s' % e.message)

    try:
        pyrax.set_setting("identity_type", "rackspace")
        if api_key and username:
            pyrax.set_credentials(username, api_key=api_key, region=region)
        elif credentials:
            credentials = os.path.expanduser(credentials)
            pyrax.set_credential_file(credentials, region=region)
        else:
            raise Exception('No credentials supplied!')
    except Exception, e:
        module.fail_json(msg='%s' % e.message)

    cloud_domain(module, state, domain, email, ttl, comment)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
