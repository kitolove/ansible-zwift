#!/usr/bin/env python

import subprocess
import alerter
import re
import os
import socket
import time

CONF=alerter.config.CONF
LOG=alerter.log.LOG
ALERTER=alerter.alert.ALERTER

def find_monitored_disks(mount_path):
    mounts = {}
    unmounts = []

    if not os.path.isdir(mount_path):
        return mounts, unmounts

    for line in subprocess.check_output(['mount', '-l']).split('\n'):
        disk_ary = line.split()
        if len(disk_ary) > 2:
            # mountpoint => device
            if disk_ary[2].startswith(mount_path):
                mounts[disk_ary[2]] = disk_ary[0]


    for file in os.listdir(mount_path):
        fullpath = os.path.join(mount_path, file)

        if os.path.isdir(fullpath) and not file.startswith('.'):
            # we will consider this a mountpoint
            if not fullpath in mounts:
                unmounts.append(fullpath)

    return mounts, unmounts

def get_utilization(disk):
    svfs = os.statvfs(disk)
    percent = int(100 - (svfs.f_bfree * 100 / max(svfs.f_blocks, 1)))
    LOG.debug('disk %s: %d%%' % (disk, percent))
    return percent


mount_path = CONF.get('mount_path', '/srv/node')
disk_alert_threshold = CONF.get('alert_threshold', 80)
interval = CONF.get('interval', 600)
print disk_alert_threshold

while True:
    mounts, unmounts = find_monitored_disks(mount_path)

    host = socket.gethostname()

    for disk in unmounts:
        LOG.error('Disk %s is unmounted' % disk)
        ALERTER.failure(disk, 'unmounted device', description='host %s: device %s unmounted' % (host, disk))

    for disk in mounts:
        percent_used = get_utilization(disk)
        print percent_used
        if percent_used > disk_alert_threshold:
            LOG.error('host %s: Disk %s is over %d%% utilization' % (host, disk, disk_alert_threshold))
            ALERTER.failure(disk, 'high utilization', description='host %s: device %s utilization at %d%%' % (host, disk, disk_alert_threshold))
    time.sleep(interval)
