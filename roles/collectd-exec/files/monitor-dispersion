#!/usr/bin/env python

import alerter
import os
import re
import subprocess
import socket
import time
import json
import tempfile

CONF = alerter.config.CONF
LOG = alerter.log.LOG
ALERTER = alerter.alert.ALERTER


def get_dispersion():
    obj_dispersion = 100.0
    con_dispersion = 100.0
    error_file = tempfile.TemporaryFile()
    try:
        dispersion_info = json.loads(subprocess.check_output(
            ['swift-dispersion-report', '-j'],
            stderr=error_file))
    except subprocess.CalledProcessError, e:
        errors = error_file.read()
        LOG.error("%s returned code %s with output %s" % 
                  (e.cmd, e.returncode, e.output + errors))
        ALERTER.failure("%s returned code %s with output %s" % 
                        (e.cmd, e.returncode, e.output + errors))
        return None, None
    con_dispersion = dispersion_info['container']['pct_found']
    obj_dispersion = dispersion_info['object']['pct_found']

    return obj_dispersion, con_dispersion

while True:
    try:
        host = socket.gethostname()
        interval = CONF.get('interval', 300)
        object_threshold = CONF.get('object_threshold', 100)
        container_threshold = CONF.get('container_threshold', 100)
        o, c = get_dispersion()
        if o is not None and c is not None:
            print 'PUTVAL "%s/swift-dispersion/gauge-container" interval=%d %d:%d' \
                % (host, interval, int(time.time()), c)
            print 'PUTVAL "%s/swift-dispersion/gauge-object" interval=%d %d:%d' % (
                host, interval, int(time.time()), o)
            if o < object_threshold or c < container_threshold:
                ALERTER.failure('dispersion', 'dispersion failure', description='low dispersion: %d%%/%d%%' % (o, c))
    except Exception as e:
        ALERTER.failure('dispersion', 'dispersion monitor exploded',
                        description='Monitoring script died: %s' % str(e))

    time.sleep(interval)
