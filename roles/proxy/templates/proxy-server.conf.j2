#
# {{ansible_managed}}
#

[DEFAULT]
backlog = 4096
bind_ip = 0.0.0.0
bind_port = 8080
log_statsd_default_sample_rate = 1.0
log_statsd_host = {{ swift_statsd_ip }}
log_statsd_metric_prefix = {{ ansible_hostname }}
log_statsd_port = 8125
log_statsd_sample_rate_factor = 1.0
workers = 12

[app:proxy-server]
account_autocreate = true
allow_account_management = {{swift_allow_account_management}}
client_timeout = 60
conn_timeout = 3.5
error_suppression_interval = 60
error_suppression_limit = 10
log_facility = LOG_LOCAL0
node_timeout = 60
object_post_as_copy = true
use = egg:swift#proxy

[filter:account-quotas]
use = egg:swift#account_quotas

[filter:authtoken]
admin_password = secrete
admin_tenant_name = service
admin_user = swift
auth_host = 192.168.122.38
auth_port = 5000
auth_protocol = http
cache = swift.cache
delay_auth_decision = 1
paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory
signing_dir = /var/cache/swift
token_cache_time = 86100

[filter:bulk]
use = egg:swift#bulk

[filter:cache]
memcache_serialization_support = 2
memcache_servers = 127.0.0.1:11211
use = egg:swift#memcache

[filter:catch_errors]
use = egg:swift#catch_errors

[filter:cname_lookup]
use = egg:swift#cname_lookup

[filter:container-quotas]
use = egg:swift#container_quotas

[filter:domain_remap]
use = egg:swift#domain_remap

[filter:formpost]
use = egg:swift#tempurl

[filter:healthcheck]
use = egg:swift#healthcheck

[filter:keystoneauth]
operator_roles = admin, swiftoperator
reseller_admin_role = reseller_admin
use = egg:swift#keystoneauth

[filter:list-endpoints]
use = egg:swift#list_endpoints

[filter:name_check]
use = egg:swift#name_check

[filter:proxy-logging]
use = egg:swift#proxy_logging

[filter:ratelimit]
use = egg:swift#ratelimit

[filter:slo]
use = egg:swift#slo

[filter:staticweb]
use = egg:swift#staticweb

[filter:tempurl]
use = egg:swift#tempurl

[filter:tempauth]
use = egg:swift#tempauth
user_admin_admin = admin .admin .reseller_admin
user_test_tester = testing .admin
user_test2_tester2 = testing2 .admin
user_test_tester3 = testing3

[filter:liteauth]
use = egg:liteauth#liteauth
google_client_id = {{google_auth_client_id}}
google_client_secret = {{google_auth_client_secret}}
service_domain = {{google_auth_domain}}
google_scope = {{google_auth_profile}}
whitelist_url = {{google_auth_whitelist_url}}

[filter:swauth]
use = egg:swauth#swauth
# The reseller prefix will verify a token begins with this prefix before even
# attempting to validate it. Also, with authorization, only Swift storage
# accounts with this prefix will be authorized by this middleware. Useful if
# multiple auth systems are in use for one Swift cluster.
#   reseller_prefix = AUTH
# If you wish to use a Swauth service on a remote cluster with this cluster:
#   swauth_remote = http://remotehost:port/auth
#   swauth_remote_timeout = 10
# When using swauth_remote, the rest of these settings have no effect.
#
# The auth prefix will cause requests beginning with this prefix to be routed
# to the auth subsystem, for granting tokens, creating accounts, users, etc.
#   auth_prefix = /auth/
# Cluster strings are of the format name#url where name is a short name for the
# Swift cluster and url is the url to the proxy server(s) for the cluster.
#   default_swift_cluster = local#http://127.0.0.1:8080/v1
# You may also use the format name#url#url where the first url is the one
# given to users to access their account (public url) and the second is the one
# used by swauth itself to create and delete accounts (private url). This is
# useful when a load balancer url should be used by users, but swauth itself is
# behind the load balancer. Example:
#   default_swift_cluster = local#https://public.com:8080/v1#http://private.com:8080/v1
# Number of seconds a newly issued token should be valid for, by default.
#   token_life = 86400
# Maximum number of seconds a newly issued token can be valid for.
#   max_token_life = <same as token_life>
# Specifies how the user key is stored. The default is 'plaintext', leaving the
# key unsecured but available for key-signing features if such are ever added.
# An alternative is 'sha1' which stores only a one-way hash of the key leaving
# it secure but unavailable for key-signing.
#   auth_type = plaintext
# Used if the auth_type is sha1 or another method that can make use of a salt.
#   auth_type_salt = swauthsalt
# This allows middleware higher in the WSGI pipeline to override auth
# processing, useful for middleware such as tempurl and formpost. If you know
# you're not going to use such middleware and you want a bit of extra security,
# you can set this to false.
#   allow_overrides = true
# Highly recommended to change this. If you comment this out, the Swauth
# administration features will be disabled for this proxy.
super_admin_key = {{swift_swauth_key}}
default_swift_cluster = {{swift_swauth_default_cluster}}

[filter:proxy-query]
use = egg:zerocloud#proxy_query
zerovm_maxinput = 5368709120
zerovm_maxoutput = 5368709120

[pipeline:main]
{% if swift_auth_type == 'tempauth' %}
pipeline = catch_errors proxy-logging healthcheck cache ratelimit tempauth proxy-logging proxy-query proxy-server
{% elif swift_auth_type == 'google' %}
pipeline = catch_errors proxy-logging healthcheck cache ratelimit liteauth proxy-logging proxy-query proxy-server
{% elif swift_auth_type == 'swauth' %}
pipeline = catch_errors proxy-logging healthcheck cache ratelimit swauth proxy-logging proxy-query proxy-server
{% endif %}
